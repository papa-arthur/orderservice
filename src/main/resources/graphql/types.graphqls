type Query{
    users:[UserDto]!
    getUserById(id:ID!):UserDto
    products:[ProductDto]!
    getProductById(id:ID!):ProductDto
    orders:[OrderDto]!
    getOrderById(orderId:ID!):OrderDto
    getOrdersForUser(userId:ID!):[OrderDto]
    getProductsForOrder(orderId:ID!):[ProductLineDto]

}


type Mutation {

    createUser(user: UserInput!): UserDto
    updateUser(user: UpdateUserInput!): UserDto
    deleteUser(userId:ID!): String

    createProduct(product: NewProductInput!): ProductDto!
    updateProduct(product: UpdateProductInput!): ProductDto
    deleteProduct(productId:ID!): String

    createOrder(order: NewOrderInput!): OrderDto
    updateOrder(order: UpdateOrderInput!): OrderDto
    deleteOrder(orderId: ID!): String
    login(loginInput:LoginInput!):LoginResponse

}

input LoginInput{
    email: String!
    password: String!
}

type LoginResponse{
    token:String
}

input UpdateOrderInput{
    orderId:ID!
    productLines:[UpdateProductLineInput]!
}
input UpdateProductLineInput{
    id:ID
    productId:ID!
    quantity:Int!
}
input NewProductInput{
    name: String!
    stock: Int!
    price: Float!

}
input UpdateProductInput{
    productId:ID
    name: String
    stock: Int
    price: Float

}
type ProductDto {
    id:ID
    name: String
    stock: Int
    price: Float
}

input UserInput {
    name: String!
    email: String!
    password: String!
    role: UserRole!

}
input UpdateUserInput {
    id:ID!
    name: String
    email: String
    password: String
}

type UserDto{
    id:ID,
    name: String
    email: String
    role: UserRole
    orders: [UserDto]
}
enum UserRole{
    ADMIN
    USER
}

input NewOrderInput{
    userId: ID!
    productLines: [NewProductLineInput]!
}

input NewProductLineInput{
    productId: ID!
    quantity: Int!
}
type OrderDto{
    id: ID
    productLines: [ProductLineDto]
    user: Int
}

type ProductLineDto{
    id: ID
    productId: ID
    quantity: Int
    productName: String
}

