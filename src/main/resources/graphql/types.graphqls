type Query{
    users:[UserDto]!
    getUserById(id:ID!):UserDto
    products:[ProductDto]!
    getProductById(id:ID!):ProductDto

}


type Mutation {

    createUser(user: UserInput!): UserDto!
    updateUser(user: UpdateUserInput!,userId:ID!): UserDto
    deleteUser(userId:ID!): String

    createProduct(product: NewProductInput!): ProductDto!
    updateProduct(product: UpdateProductInput!, productId: ID): ProductDto
    deleteProduct(productId:ID!): String

}


input NewProductInput{
    name: String!
    stock: Int!
    price: Float!

}
input UpdateProductInput{
    name: String
    stock: Int
    price: Float

}
type ProductDto {
    id:ID
    name: String
    stock: Int
    price: Float
}

input UserInput {
    name: String!
    email: String!
    password: String!
    role: UserRole!

}
input UpdateUserInput {
    name: String
    email: String
    password: String
}

type UserDto{
    id:ID,
    name: String
    email: String
    role: UserRole
    orders: [UserDto]
}
enum UserRole{
    ADMIN
    USER
}

